---
openapi: 3.0.0
info:
  title: So Yummy API docs
  description: The API for the So Yummy project
  version: 1.0.0
servers:
  - url: https://so-yammy-backend.onrender.com/api/users/
paths:
  /signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCredentials'
        required: true
      responses:
        '200':
          description: User registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Validation error's description
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
  /login:
    post:
      tags:
        - Auth
      summary: Login User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginInfo'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"name" is not allowed'
        '401':
          description: Unauthorized - Email is not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is not verified
        '403':
          description: Forbidden - Email or password is wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email or password is wrong
  /logout:
    post:
      tags:
        - Auth
      summary: Logout a user
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized - Invalid or empty access token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
      security:
        - bearerAuth: []
  /refresh:
    post:
      tags:
        - Auth
      summary: Logout a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshBody'
        required: true
      responses:
        '200':
          description: Successful refresh response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse200'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"refreshToken" is required or invalid'
        '403':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: invalid token
  /verify/{verificationToken}:
    get:
      tags:
        - Auth
      summary: Verification User's email
      parameters:
        - name: verificationToken
          in: path
          description: Verification token
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful email verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Verification is successful
        '404':
          description: User is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: User is not found
  /verify/resend-email:
    post:
      tags:
        - Auth
      summary: Resend verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Verification email is sent
        '400':
          description: Verification has already been passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Verification has already been passed
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email or password is wrong
  /current:
    get:
      tags:
        - Auth
      summary: Get user's info
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /user-info:
    post:
      tags:
        - Auth
      summary: Update user's name and avatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInfoBody'
        required: true
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"name" is required'
        '500':
          description: Error image processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
components:
  schemas:
    RegisterCredentials:
      required:
        - email
        - name
        - password
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    LoginCredentials:
      required:
        - email
        - password
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    Password:
      maxLength: 100
      minLength: 6
      type: string
      description: User's password
      example: qwerty
    UserName:
      maxLength: 32
      minLength: 3
      type: string
      description: User's name
      example: UserName
    Email:
      type: string
      description: User's email
      format: email
      example: UserName@mail.com
    AvatarURL:
      type: string
      description: Link to user's avatar
      format: uri
      example: https://www.gravatar.com/avatar/zzzzzzz51e4f820b32bdab872bab54f6
    LoginInfo:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'
        user:
          $ref: '#/components/schemas/User'
    InfoMessage:
      type: object
      properties:
        message:
          type: string
    Token:
      type: string
      description: JWT access token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0MGQ4NmViZmIwZTYyMWU0Yzc0MTk0ZCIsImlhdCI6MTY3ODYxNTU2MiwiZXhwIjoxNjc5MjIwMzYyfQ.fKXYzEU6XTlE6ZcgdiFBRzMOkQOVz5M9gWmN3khZi7c
    User:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/Email'
        avatarURL:
          $ref: '#/components/schemas/AvatarURL'
    Avatar:
      maxLength: 2097152
      type: string
      format: binary
    RefreshBody:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          $ref: '#/components/schemas/Token'
    RefreshResponse200:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'
    UpdateUserInfoBody:
      required:
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        avatar:
          $ref: '#/components/schemas/Avatar'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
